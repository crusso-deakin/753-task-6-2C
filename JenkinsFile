pipeline {
    agent any

    environment {
        DIRECTORY_PATH = "C:/Code/source"
        TESTING_ENVIRONMENT = "Task 6.2 Testing Environment"
        STAGING_ENVIRONMENT = "AWS EC2 - Staging"
        PRODUCTION_ENVIRONMENT = "AWS EC2 - Production"
        RECIPIENT_EMAIL = "s223446607@deakin.edu.au"
        SENDER_EMAIL = "crusso.deakin@gmail.com"
    }

    stages{
        stage('Build'){
            steps{
                echo "Fetch the source code from the directory path specified by the environment variable: $DIRECTORY_PATH"
                echo "Build the code using Maven"
                echo "Command to be used: sh 'mvn package'"
            }
        }
        stage('Unit and Integration Tests'){
            steps{
                echo "Unit tests with Maven"
                echo "Command to be used: sh 'mvn test'"
                echo "Integration tests"
            }
            post{
                success{
                    emailext to: "${RECIPIENT_EMAIL}",
                    from: "${SENDER_EMAIL}",
                    subject: "Unit and Integration Tests Email",
                    body: "Unit and Integration Tests succesful!",
                    attachLog: true
                }
                failure{
                    emailext to: "${RECIPIENT_EMAIL}",
                    from: "${SENDER_EMAIL}",
                    subject: "Unit and Integration Tests Email",
                    body: "Unit and Integration Tests failed!",
                    attachLog: true
                }
            }
        }
        stage('Code Analysis'){
            steps{
                echo "Conducting code analysis with SonarQube"
                echo "Command to be used: sh 'mvn sonar:sonar'"
            }
        }
        stage('Security Scan'){
            steps{
                echo "Performing security scan with OWOWASP Dependency-Check"
                echo "Command to be used: sh 'mvn org.owasp:dependency-check-maven:check'"
            }
            post{
                success{
                    emailext to: "${RECIPIENT_EMAIL}",
                    from: "${SENDER_EMAIL}",
                    subject: "Security Scan Email",
                    body: "Security Scan succesful!",
                    attachLog: true
                }
                failure{
                    emailext to: "${RECIPIENT_EMAIL}",
                    from: "${SENDER_EMAIL}",
                    subject: "Security Scan Email",
                    body: "Security Scan failed!",
                    attachLog: true
                }
            }
        }
        stage('Deploy to Staging'){
            steps{
                echo "Deploying to staging server using AWS Elastic Beanstalk"
                echo "Staging Environment: $STAGING_ENVIRONMENT"
            }
        }
        stage('Integration Tests on Staging'){
            steps{
                echo "Performing integration tests in the staging environment using Maven"
            }
            post{
                success{
                    emailext to: "${RECIPIENT_EMAIL}",
                    from: "${SENDER_EMAIL}",
                    subject: "Integration Tests on Staging Email",
                    body: "Integration Tests on Staging succesful!",
                    attachLog: true
                }
                failure{
                    emailext to: "${RECIPIENT_EMAIL}",
                    from: "${SENDER_EMAIL}",
                    subject: "Integration Tests on Staging Email",
                    body: "Integration Tests on Staging failed!",
                    attachLog: true
                }
            }
        }
        stage('Deploy to Production'){
            steps{
                echo "Deploying to production environment AWS Elastic Beanstalk"
                echo "Production Environment: $PRODUCTION_ENVIRONMENT"
            }
        }
    }
}